{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"include_colab_link":true},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8423193,"sourceType":"datasetVersion","datasetId":5014954}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/nudojacopo/thesis/blob/main/HWK_labs.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github"}},{"cell_type":"markdown","source":"Notes for Jacopo:","metadata":{"id":"hb5traIJtpJn"}},{"cell_type":"markdown","source":"\n <br>\n","metadata":{"id":"1RXSw25AtpJt"}},{"cell_type":"markdown","source":"Define the module path + import packages","metadata":{"id":"p9lCuzmYtpJt"}},{"cell_type":"code","source":"#kernel=input('Choose a kernel to use...are you running in local? Y/N')\nkernel='K'\nif kernel=='C':\n  !git clone https://github.com/nudojacopo/thesis.git\n  from google.colab import drive\n  drive.mount('/content/drive')\n  source_data='/content/drive/MyDrive/thesis/data/voat/voat_labeled_data_unified.parquet'\n  root='/content/'\nif kernel=='K':\n  !rm -rf thesis\n  !git clone https://github.com/nudojacopo/thesis.git\n  %cd thesis\n  %cd src\n  %cd HWK\n  source_data='/kaggle/input/voat-dataset/voat_labeled_data_unified.parquet'\n  root='/kaggle/output/'\n  path='/kaggle/working/thesis/'\nelse:\n  source_data='/Users/jacoponudo/Documents/thesis/data/voat/voat_labeled_data_unified.parquet'\n  root='/Users/jacoponudo/Documents/'\noutput=root+'src/HWK/output'\noutput_threads=root+'src/HWK/output/temporary'\nimport sys\nmodule_path = root+'thesis/src/HWK'\nsys.path.append(module_path)\nimport os\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom HWK_package.functions import *\nfrom scipy import stats\nimport random\nfrom scipy.stats import chi2\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.gofplots import qqplot","metadata":{"id":"Y0HNlr43uyvd","outputId":"ef43593d-a8ab-4b9e-c2fe-6694da998f9d","execution":{"iopub.status.busy":"2024-05-15T23:02:02.424635Z","iopub.execute_input":"2024-05-15T23:02:02.425338Z","iopub.status.idle":"2024-05-15T23:02:13.002060Z","shell.execute_reply.started":"2024-05-15T23:02:02.425304Z","shell.execute_reply":"2024-05-15T23:02:12.999701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Il sintetizzatore","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom itertools import product\nfrom tqdm import tqdm\nfrom scipy.stats import kstest\n\n# Read dataset voat\ndataset = pd.read_parquet(source_data)\n\n# Assuming dataset, root_submission, observed_data, start_conversation, end_conversation, ℋ_t, and x_values are defined\nroot_submission_list=list(dataset.root_submission.sample(40))\n\n# Lista dei parametri\nlambda_grid = np.concatenate((np.arange(1, 100, 5), np.arange(100, 800, 10)))\nalpha_grid = np.concatenate(([0.0001, 0.1, 0.5], np.arange(1, 60, 5)))\nbeta_grid = np.arange(60, 190, 50)\ntheta_combinations = list(product(lambda_grid, alpha_grid, beta_grid))\nn_sim = 5\n\n# Lista per memorizzare i risultati\nresults = []\nx_values = np.arange(0, 1, 0.0001)  #griglia\n\n# Loop over root_submission\nfor root_submission in tqdm(root_submission_list):\n    root = dataset[dataset['root_submission'] == root_submission]\n    root.sort_values(by='created_at', inplace=True)\n    observed_data = np.array([np.datetime64(x.replace(tzinfo=None)).astype(np.int64) for x in root['created_at']])\n    start_conversation = np.datetime64(min(root['created_at']).replace(tzinfo=None))\n    end_conversation = np.datetime64(max(root['created_at']).replace(tzinfo=None))\n    ℋ_t = (observed_data - start_conversation.astype(np.int64)) / (end_conversation.astype(np.int64) - start_conversation.astype(np.int64))\n    root.loc[:, 'time'] = ℋ_t.copy()\n    ECDF = np.array(F(x_values, ℋ_t))\n\n    # Esecuzione della grid search\n    for l, alpha, beta in tqdm(theta_combinations, total=len(theta_combinations)):\n        theta = np.array([l, alpha, beta])\n        KS_sims = []\n        for i in range(n_sim):\n            ℋ_t_simulated = exp_simulate_by_composition_alt(theta, 1)\n            SCDF = np.array(F(x_values, ℋ_t_simulated))\n            KS, p_value = kstest(ECDF, SCDF)\n            KS_sims.append(KS)\n        results.append({'root': root_submission, 'lambda': l, 'alpha': alpha, 'beta': beta, 'KS_expected_value': np.mean(KS_sims), 'sd_exepected_value': np.std(KS_sims)})\n    df = pd.DataFrame(results)\n    df.to_csv('/kaggle/working/grid_search_Sintetizzatore.csv', index=False)\n","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-05-15T23:02:13.056612Z","iopub.execute_input":"2024-05-15T23:02:13.057634Z","iopub.status.idle":"2024-05-15T23:02:52.062570Z","shell.execute_reply.started":"2024-05-15T23:02:13.057581Z","shell.execute_reply":"2024-05-15T23:02:52.060867Z"},"trusted":true},"execution_count":null,"outputs":[]}]}